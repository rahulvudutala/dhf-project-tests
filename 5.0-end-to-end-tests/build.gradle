buildscript {
    repositories {
//        maven {url 'http://distro.marklogic.com/nexus/repository/maven-snapshots/'}
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath "com.marklogic:ml-data-hub:5.0-SNAPSHOT"
        classpath "com.marklogic:marklogic-data-hub:5.0-SNAPSHOT"
    }
}

plugins {
    id "groovy"
    id "java-gradle-plugin"
    id 'org.springframework.boot' version '2.1.3.RELEASE'
    id "io.spring.dependency-management" version "1.0.7.RELEASE"
}

apply plugin: "com.marklogic.ml-data-hub"

bootJar.enabled = false
jar.enabled = true

repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
    maven { url 'http://repo.spring.io/milestone' }
    maven { url 'http://developer.marklogic.com/maven2' }
    maven { url "http://repository.cloudera.com/artifactory/cloudera-repos/" }
    maven { url 'http://distro.marklogic.com/nexus/repository/maven-snapshots/'}
}

configurations {
    mlcp {
        resolutionStrategy {
            force "xml-apis:xml-apis:1.4.01"
        }
    }
}

dependencies {
    compile gradleApi()
    compile ('com.marklogic:marklogic-data-hub:5.0-SNAPSHOT') {
        exclude group: 'ch.qos.logback'
    }
    compile ('com.marklogic:ml-gradle:3.15.0') {
        exclude group: 'ch.qos.logback'
    }
    compile 'org.jdom:jdom2:2.0.6'
    testCompile localGroovy()
    testCompile gradleTestKit()
    testCompile 'xmlunit:xmlunit:1.3'
    testCompile ('org.springframework.boot:spring-boot-starter-test:2.1.3.RELEASE')  {
        exclude module: "logback-classic"      
    }
    testCompile 'commons-io:commons-io:2.4'
    testCompile 'com.marklogic:marklogic-xcc:10.0.1'
    mlcp "com.marklogic:mlcp:10.0.1"

    testRuntime 'org.junit.platform:junit-platform-runner:1.4.0'
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.3.2'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.3.2'
    testCompile 'junit:junit:4.12'
    testRuntime 'org.junit.vintage:junit-vintage-engine:5.3.2'
}

test {
    useJUnitPlatform()
    minHeapSize = "128m"
    maxHeapSize = "2g"
    testLogging {
        // Make test events are logged and standard out or error is shown
        events 'started','passed', 'skipped', 'failed'
        exceptionFormat 'full'
        showStandardStreams = true
    }
    include 'com/marklogic/integration/tests/DefaultMappingFlowTests.class'
    include 'com/marklogic/integration/tests/FlowEndToEndTests.class'
    include 'com/marklogic/integration/tests/TemporalDocsTest.class'
}

task unDeployDHF (type: Exec) {
    workingDir './'
    commandLine './gradlew', 'mlUndeploy', '-Pconfirm=true'
}

task importData(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    input_file_path = "input/orders/simple-docs/json"
    input_file_type = "documents"
    output_collections = "default-ingest"
    output_permissions = "rest-reader,read,rest-writer,update"
    output_uri_replace = new File("").absolutePath + "/" + input_file_path + "/" + ",'/json/'"
    transform_module =  "/data-hub/5/transforms/mlcp-flow-transform.sjs"
    transform_namespace = "http://marklogic.com/data-hub/mlcp-flow-transform"
    transform_param = 'options={},flow-name=default-ingestion'
    command = "IMPORT"
    mode = "local"
    host = mlHost
    port = 8010
    username = "flow-operator"
    password = "flow-operator"
    restrict_hosts = true
}

task importDataAsXML(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    input_file_path = "input/orders/simple-docs/xml"
    input_file_type = "documents"
    output_collections = "default-ingest"
    output_permissions = "rest-reader,read,rest-writer,update"
    output_uri_replace = new File("").absolutePath + "/" + input_file_path + "/" + ",'/xml/'"
    transform_module =  "/data-hub/5/transforms/mlcp-flow-transform.sjs"
    transform_namespace = "http://marklogic.com/data-hub/mlcp-flow-transform"
    transform_param = 'options={"outputFormat":"xml"},flow-name=default-ingestion'
    command = "IMPORT"
    mode = "local"
    host = mlHost
    port = 8010
    username = "flow-operator"
    password = "flow-operator"
    restrict_hosts = true
}

task importTemporalData(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    input_file_path = "input/orders/simple-docs/json"
    input_file_type = "documents"
    output_collections = "default-ingest"
    output_permissions = "rest-reader,read,rest-writer,update"
    output_uri_replace = new File("").absolutePath + "/" + input_file_path + "/" + ",'/json/'"
    transform_module =  "/data-hub/5/transforms/mlcp-flow-transform.sjs"
    transform_namespace = "http://marklogic.com/data-hub/mlcp-flow-transform"
    transform_param = 'options={"outputFormat": "json","headers":{"systemStart": "2014-04-03T11:00:00Z", "systemEnd": "2014-04-03T11:00:00Z","validStart": "2014-04-03T11:00:00Z", "validEnd": "2014-04-03T11:00:01Z"}},flow-name=default-ingestion'
    command = "IMPORT"
    mode = "local"
    host = mlHost
    port = 8010
    username = "flow-operator"
    password = "flow-operator"
    restrict_hosts = true
    temporal_collection = "temporal-collection-ingest"
}
test.dependsOn("hubInit", "mlDeploy")
//test.finalizedBy("unDeployDHF")